import { Meal } from "@/data/cartAtom";
import {
  filteredOrdersList,
  Order,
  orderFilterAtom,
  ordersAtom,
} from "@/data/ordersAtom";
import { db } from "@/util/firestore";
import { collection, getDocs } from "firebase/firestore";
import Head from "next/head";
import * as React from "react";
import { useState, useEffect } from "react";
import { BsCashStack, BsClockFill } from "react-icons/bs";
import { useRecoilState, useRecoilValue } from "recoil";
interface IAppProps {}

const App: React.FunctionComponent<IAppProps> = (props) => {
  const [filter, setFilter] = useRecoilState(orderFilterAtom);
  const [orders, setOrders] = useRecoilState(ordersAtom);
  const list = useRecoilValue(filteredOrdersList);

  useEffect(() => {

    async function fetchOrders() {
      let arr : Order[] = [];
      const querySnapshot = await getDocs(collection(db, "orders"));
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const id = doc.id;
        const order = {...data, id};
        arr.push(order as Order)
      })
      setOrders(arr)
    }

    fetchOrders();
  }, []);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex-1 flex text-white max-w-xl flex-col justify-start gap-4 items-center p-6 overflow-y-scroll">

        {/* Filters */}
        <div className="flex w-full gap-3">
          <button
            className={`bg-${
              filter === "pending" ? "primary" : "black"
            } transition-[1s] w-32 h-10 rounded-md ${
              filter !== "pending" && "border border-gray"
            } flex justify-center items-center gap-3 font-bold text-white text-xs`}
            onClick={() => setFilter("pending")}
          >
            <BsClockFill className="text-xs" />
            <p>Pending</p>
          </button>
          <button
            className={`bg-${
              filter === "all" ? "primary" : "black"
            } transition-[1s] w-32 h-10 ${
              filter !== "all" && "border border-gray"
            } rounded-md flex justify-center items-center gap-3 font-bold text-white text-xs`}
            onClick={() => setFilter("all")}
          >
            <BsCashStack className="" />
            <p>All orders</p>
          </button>
        </div>

        {/* Render */}
        {list.map((order) => {
            let color = "";
            switch(order.status) {
                case "Accepted":
                    color = "text-primary";
                    break;
                case "Rejected":
                    color = "text-red";
                    break;
                case "Delivered":
                    color = "text-green-700";
                    break;
                default:
                    break;    
            }
            return (
          <div
            className="w-full font-bold text-sm h-auto border border-dashed border-gray flex items-center justify-evenly flex-col text-white"
            key={order.id}
          >
            {/* Order ID */}
            <div className="w-full flex justify-between items-center px-4 py-4 text-gray">
              <p>Order id.</p>
              <p>{order.id}</p>
            </div>

            {/* Meal re-render */}
            {order.meals.map((meal) => (
              <div
                key={meal.id}
                className="w-full flex items-center justify-between px-4 py-4"
              >
                <p>{meal.name}</p>
                <div className="flex flex-col gap-1 font-bold text-xs">
                  <p className="flex gap-1 font-semibold items-center">
                    <BsClockFill className=" text-xs text-primary" />
                    {`${meal.minTime}-${meal.maxTime} min.`}
                  </p>
                  <p className="flex gap-1  font-semibold items-center">
                    <BsCashStack className=" text-xs text-primary" />
                    {`${meal.price} XOF`}
                  </p>
                </div>
              </div>
            ))}

            <div className="w-full flex justify-between items-center px-4 py-4">
              <p>Total</p>
              <p className="text-xs font-semibold">
                {order.meals.reduce((a: number, b: Meal) => a + b.price, 0)} XOF
              </p>
            </div>

            <div className="w-full h-auto bg-black flex justify-between items-center text-end px-4 py-4">
              <p className="">Status</p>
              <div className="flex flex-col gap-1 items-end font-bold text-xs">
                <p
                  className={` ${color}
              text-xs font-semibold`}
                >
                  {order.status}
                </p>
                {order.message && 
                <p className="font-semibold break-words max-w-sm text-gray">{order.message}</p>
                }
              </div>
            </div>
          </div>
        )})}
      </div>
    </>
  );
};

export default App;
