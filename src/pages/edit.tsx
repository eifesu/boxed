import { Meal } from "@/data/cartAtom";
import { loadingAtom } from "@/data/loadingAtom";
import { db, storage } from "@/util/firestore";
import { randomUUID } from "crypto";
import { getDoc, collection, doc, setDoc, addDoc } from "firebase/firestore";
import { getDownloadURL, ref, uploadBytesResumable } from "firebase/storage";
import Head from "next/head";
import { Router, useRouter } from "next/router";
import * as React from "react";
import { BsFillPatchCheckFill, BsFillPlusCircleFill } from "react-icons/bs";
import { FaMapMarker } from "react-icons/fa";
import { ThreeDots } from "react-loader-spinner";
import { useRecoilState } from "recoil";

interface IAppProps {}

const App: React.FunctionComponent<IAppProps> = (props) => {
	const router = useRouter();
	const { id } = router.query;
	const [loading, setLoading] = useRecoilState(loadingAtom);
	const [file, setFile] = React.useState<any>();
	const [meal, setMeal] = React.useState({
		maxTime: 0,
		minTime: 0,
		name: "",
		photoURL: "",
		price: 0,
	});

	React.useEffect(() => {
		if (!id) {
			return;
		}

		const fetchMeal = async () => {
			const docRef = doc(db, "meals", id as string);
			const docSnap = await getDoc(docRef);

			if (docSnap.exists()) {
				setMeal(docSnap.data() as any);
				console.log("data", docSnap.data());
			}
		};

		fetchMeal();
	}, [id]);

	React.useEffect(() => {
		if (!file) {
			return;
		}

		setMeal((prevState) => ({
			...prevState,
			photoURL: URL.createObjectURL(file),
		}));
	}, [file]);

	function handleChangeMeal(e: React.ChangeEvent<HTMLInputElement>) {
		if (e.target.type === "number") {
			setMeal((prevState) => ({
				...prevState,
				[e.target.name]: parseInt(e.target.value),
			}));
		} else {
			setMeal((prevState) => ({
				...prevState,
				[e.target.name]: e.target.value,
			}));
		}
	}

	async function handleImage(e: React.ChangeEvent<HTMLInputElement>) {
		if (e.target.files) {
			setFile(e.target.files[0]);
		}
	}
	async function handleSubmit(e: React.MouseEvent<HTMLButtonElement>) {
		if (file) {
			console.log("Uploading");
			setLoading(true);
			const pictureRef = ref(storage, `images/${file.name}.`);
			const uploadTask = uploadBytesResumable(pictureRef, file);
			uploadTask.on(
				"state_changed",
				(snapshot) => {
					const progress =
						(snapshot.bytesTransferred / snapshot.totalBytes) * 100;
					console.log("Upload is " + progress + "% done");
					switch (snapshot.state) {
						case "paused":
							console.log("Upload is paused");
							break;
						case "running":
							console.log("Upload is running");
							break;
					}
				},
				(error) => {},
				() => {
					getDownloadURL(uploadTask.snapshot.ref).then(
						async (downloadURL) => {
							console.log("Uploaded file at url", downloadURL);
							if (id) {
								const mealRef = doc(db, "meals", id as string);
								await setDoc(mealRef, {
									...meal,
									photoURL: downloadURL,
								}).then(() => {
									setLoading(false);
									router.push("/meals");
								});
								return;
							}

							await addDoc(collection(db, "meals"), meal).then(
								(response) => {
									setLoading(false);
									router.push("/meals");
								}
							);
						}
					);
				}
			);
		} else {
			if (id) {
				const mealRef = doc(db, "meals", id as string);
				await setDoc(mealRef, meal).then(() => {
					setLoading(false);
					router.push("/meals");
				});
				return;
			}

			await addDoc(collection(db, "meals"), meal).then((response) => {
				setLoading(false);
				router.push("/meals");
			});
		}
	}
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="flex max-w-xl flex-1 flex-col items-center justify-start gap-3 overflow-y-scroll p-6 text-white">
				<div
					style={{ backgroundImage: `url(${meal.photoURL})` }}
					className="h-64 w-full bg-cover bg-center"
				/>

				<label className="flex min-h-[40px] w-full items-center justify-center gap-4 rounded-md border border-gray bg-primary px-4 text-sm font-bold text-white">
					<p>Pick an image</p>
					<input
						name="name"
						type="file"
						accept="image/*"
						onChange={handleImage}
						style={{ display: "none" }}></input>
				</label>

				<div className="flex min-h-[40px] w-full items-center gap-4 rounded-md border border-gray bg-black px-4 text-gray">
					<FaMapMarker className="text-sm text-gray" />
					<input
						name="name"
						type="text"
						minLength={10}
						maxLength={30}
						className="flex-1 text-sm font-semibold text-white placeholder:text-gray"
						placeholder="Enter meal name"
						onChange={handleChangeMeal}
						value={meal.name}></input>
				</div>

				<div className="flex min-h-[40px] w-full items-center justify-center gap-4 rounded-md border border-gray bg-black px-4 text-gray">
					<FaMapMarker className="text-sm text-gray" />
					<input
						name="price"
						type="number"
						min={1500}
						max={15000}
						className="flex-1 text-sm font-semibold text-white placeholder:text-gray"
						placeholder="Enter meal price"
						onChange={handleChangeMeal}
						value={meal.price}></input>
					<p className=" text-xs font-bold">XOF</p>
				</div>

				<div className="flex w-full items-center gap-4 ">
					<div className="flex min-h-[40px] w-full items-center gap-4 rounded-md border border-gray bg-black px-4 text-gray">
						<FaMapMarker className="text-sm text-gray" />
						<input
							name="minTime"
							type="number"
							min={5}
							max={120}
							className="w-full flex-1 text-sm font-semibold text-white placeholder:text-gray"
							placeholder="Min."
							onChange={handleChangeMeal}
							value={meal.minTime}></input>
						<p className=" text-xs font-bold">min.</p>
					</div>

					<div className="flex min-h-[40px] w-full items-center gap-4 rounded-md border border-gray bg-black px-4 text-gray">
						<FaMapMarker className="text-sm text-gray" />
						<input
							name="maxTime"
							type="number"
							min={5}
							max={120}
							className="w-full flex-1 text-sm font-semibold text-white placeholder:text-gray"
							placeholder="Max."
							onChange={handleChangeMeal}
							value={meal.maxTime}></input>
						<p className=" text-xs font-bold">min.</p>
					</div>
				</div>

				{/* Submit */}
				<button
					onClick={handleSubmit}
					disabled={
						!(
							meal.name.length > 0 &&
							meal.price &&
							meal.price > 500 &&
							meal.price < 15000 &&
							meal.minTime &&
							meal.minTime > 0 &&
							meal.minTime < 120 &&
							meal.maxTime &&
							meal.maxTime > 0 &&
							meal.maxTime < 120 &&
							meal.maxTime > meal.minTime &&
							!loading
						)
					}
					className={` text-md flex  min-h-[2.5rem] w-full items-center justify-center gap-2 self-end rounded-md bg-primary font-bold text-white transition-[1s] disabled:bg-gray disabled:text-black`}>
					{!loading ? (
						<>
							<p>Save changes</p>
							<BsFillPatchCheckFill className="text-lg" />
						</>
					) : (
						<ThreeDots height={8} color="black" />
					)}
				</button>
			</div>
		</>
	);
};

export default App;
